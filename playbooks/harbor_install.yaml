- name: 同步hosts
  hosts: all
  gather_facts: no
  vars_files: ../files/vars.yaml
  tasks:
    - name: 修改hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ harbor_ip }} {{ harbor_domain }}"
        create: yes

- name: 初始化harbor主机
  hosts: harbor
  gather_facts: no
  vars_files: ../files/vars.yaml
  tasks:
    - name: 创建安装缓存目录
      file:
        path: /root/k8s_install
        state: directory

    - name: 检查harbor.lock文件是否存在
      stat:
        path: /root/k8s_install/system-init.lock
      register: system_init_exists

    - name: 开始进行初始化操作
      block:
        - name: 设置节点时间同步
          lineinfile:
            path: /etc/systemd/timesyncd.conf
            regexp: ^#NTP=
            line: 'NTP={{NTP}}'
            backup: yes  
        - name: 24小时制
          copy:
            content: |
              LANG=en_US.UTF-8
              LC_TIME=en_DK.UTF-8
            dest: /etc/default/locale
        - name: set timezone
          timezone:
            name: Asia/Shanghai

        - name: 安装docker.io
          apt:
            name: docker.io
            state: present
        - name: 配置/etc/docker/daemon.json
          copy:
            content: |
              { 
                "data-root": "/data2/docker", 
                "exec-opts": ["native.cgroupdriver=systemd"], 
                "registry-mirrors": [
                  "https://docker.m.daocloud.io"
                ],
                "insecure-registries": ["{{ harbor_domain }}"],
                "max-concurrent-downloads": 10,
                "live-restore": true,
                "log-driver": "json-file",
                "log-level": "warn",
                "log-opts": {
                  "max-size": "50m",
                  "max-file": "1"
                  },
                "storage-driver": "overlay2"
              }
            dest: /etc/docker/daemon.json

        - name: 重启docker
          service:
            name: docker
            state: restarted
 
        - name: 安装 ipset ipvsadm
          apt:
            pkg:
            - ipset
            - ipvsadm
          
        - name: 容器系统调优
          copy:
            content: |
              #允许IPv6转发请求通过iptables进行处理(如果禁用防火墙或不是iptables,则该配置无效)
              net.bridge.bridge-nf-call-ip6tables = 1
              #允许IPv4转发请求通过iptables进行处理(如果禁用防火墙或不是iptables,则该配置无效)
              net.bridge.bridge-nf-call-iptables = 1
              #启用IPv4数据包的转发功能
              net.ipv4.ip_forward = 1
              #禁用发送 ICMP 重定向消息
              #net.ipv4.conf.all.send_redirects = 0
              #net.ipv4.conf.default.send_redirects = 0
              #提高TCP连接跟踪的最大数量
              # net.netfilter.nf_conntrack_max = 1000000
              #提高连接追踪表的超时时间
              #net.netfilter.nf_conntrack_tcp_timeout_established = 86400
              #提高监听队列大小
              #net.core.somaxconn = 1024
              #防止 SYN 攻击
              #net.ipv4.tcp_syncookies = 1
              #net.ipv4.tcp_max_syn_backlog = 2048
              #net.ipv4.tcp_synack_retries = 2
              #提高文件描述符限制
              fs.file-max = 65536
              #设置虚拟内存交换(swap)的使用策略为0,减少对磁盘的频繁读写
              vm.swappiness = 0
            dest: /etc/sysctl.d/k8s.conf
    
        - name: 加载iptables和ipvs内核模块
          copy:
            content: |
              # /etc/modules-load.d/kubernetes.conf
              # Linux 网桥支持
              br_netfilter
              # IPVS 加载均衡器
              ip_vs
              ip_vs_rr
              ip_vs_wrr
              ip_vs_sh
              # IPv4 连接跟踪
              nf_conntrack_ipv4
              # IP 表规则
              ip_tables
            dest: /etc/modules-load.d/kubernetes.conf
            mode: '0755'

        - name: 在文件中查找 swap 行
          shell: grep -E 'swap' /etc/fstab || true
          register: swap_lines
          failed_when: false

        - name: 注释掉 swap 行
          lineinfile:
            path: /etc/fstab
            regexp: '{{ item }}'
            line: '# {{ item }}'
            backup: yes
          with_items: "{{ swap_lines.stdout_lines }}"
          when: swap_lines.stdout_lines | length > 0
      always:
        - name: 关闭 swap 分区
          command: swapoff -a
      when: not system_init_exists.stat.exists

    - name: 安装docker-compose
      block:
        - name: 温馨提示
          debug:
            msg: |
              需要提前下载docker-compose二进制文件,详情参考仓库根目录readme文件
        - name: 复制docker-compose-linux-x86_64到harbor主机
          copy:
            src: ../files/harbor/docker-compose-linux-x86_64
            dest: /usr/local/bin/docker-compose
            mode: 0755
      when: not system_init_exists.stat.exists
    
    - name: 安装harbor
      block:
        - name: 温馨提示
          debug:
            msg: |
              需要提前下载harbor二进制文件,详情参考仓库根目录readme文件
        - name: 解压harbor-offline-installer.tgz
          unarchive:
            src: ../files/harbor/harbor-offline-installer.tgz
            dest: /usr/local/src/
        - name: 创建hatbor证书目录
          file:
            path: /usr/local/src/harbor/certs
            state: directory
            mode: '0755'
        - name: 生成 CA 证书私钥
          shell: openssl genrsa -out /usr/local/src/harbor/certs/ca.key 4096 

        - name: 生成 CA 证书
          shell: "openssl req -x509 -new -nodes -sha512 -days 3650 \
            -subj '/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN={{ harbor_domain }}' \
            -key /usr/local/src/harbor/certs/ca.key \
            -out /usr/local/src/harbor/certs/ca.crt"

        - name: 生成harbor服务器私钥
          shell: openssl genrsa -out /usr/local/src/harbor/certs/{{ harbor_domain.split('.')[0] }}.key 4096

        - name: 生成证书签名请求 (CSR)
          shell: "openssl req -sha512 -new \
            -subj '/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN={{ harbor_domain }}' \
            -key /usr/local/src/harbor/certs/{{ harbor_domain.split('.')[0] }}.key \
            -out  /usr/local/src/harbor/certs/{{ harbor_domain.split('.')[0] }}.csr"
        
        - name: 生成 x509 v3 扩展名文件
          copy: 
            content: |
              authorityKeyIdentifier=keyid,issuer
              basicConstraints=CA:FALSE
              keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
              extendedKeyUsage = serverAuth
              subjectAltName = @alt_names
              [alt_names]   #alt_names必须要包含harbor服务的域名信息
              DNS.1={{ harbor_domain }}
              DNS.2={{ harbor_domain }}.cn
              DNS.3={{ harbor_domain.split('.')[0] }}
            dest: /usr/local/src/harbor/certs/v3.ext

        - name: 使用该v3.ext文件为您的 Harbor 主机生成证书
          shell: "openssl x509 -req -sha512 -days 3650 \
            -extfile /usr/local/src/harbor/certs/v3.ext \
            -CA /usr/local/src/harbor/certs/ca.crt \
            -CAkey /usr/local/src/harbor/certs/ca.key -CAcreateserial \
            -in /usr/local/src/harbor/certs/{{ harbor_domain.split('.')[0] }}.csr \
            -out /usr/local/src/harbor/certs/{{ harbor_domain.split('.')[0] }}.crt"

        - name: 复制harbor.yml
          copy:
            src: /usr/local/src/harbor/harbor.yml.tmpl
            dest: /usr/local/src/harbor/harbor.yml
            remote_src: yes

        - name: 修改harbor.yml
          lineinfile:
            path: /usr/local/src/harbor/harbor.yml
            regexp: ^hostname
            line: 'hostname: {{ harbor_domain }}'

        - name: 修改certificate
          lineinfile:
            path: /usr/local/src/harbor/harbor.yml
            regexp: "certificate:"
            line: "  certificate: /usr/local/src/harbor/certs/{{ harbor_domain.split('.')[0] }}.crt"

        - name: 修改private_key
          lineinfile:
            path: /usr/local/src/harbor/harbor.yml
            regexp: "private_key:"
            line: "  private_key: /usr/local/src/harbor/certs/{{ harbor_domain.split('.')[0] }}.key"

        - name: 复制安装harbor命令脚本到harbor主机
          copy:
            content: |
              cd /usr/local/src/harbor/; ./install.sh --with-trivy
            dest: /root/k8s_install/harbor_install_command.sh
            mode: '0755'

        - name: 创建docker的hatbor证书目录
          file:
            path: /etc/docker/certs.d/{{ harbor_domain }}
            state: directory
            mode: '0755'

        - name: 配置本机docker访问harbor
          shell: cp  /usr/local/src/harbor/certs/{{ harbor_domain.split('.')[0] }}.crt /etc/docker/certs.d/{{ harbor_domain }}/

        - name: 重启docker
          service:
            name: docker
            state: restarted

        - name: 把harbor证书拉取到master1上
          fetch:
            src: /usr/local/src/harbor/certs/{{ harbor_domain.split('.')[0] }}.crt
            dest: /root/
            flat: yes
        - name: 创建安装lock文件
          file: 
            path: /root/k8s_install/system-init.lock
            state: touch 
      when: not system_init_exists.stat.exists

- name: 配置docker和containerd访问harbor
  hosts: k8s
  gather_facts: no
  vars_files: ../files/vars.yaml
  tasks:
    - name: 检查harbor_docker_containerd.lock文件是否存在
      stat:
        path: /root/k8s_install/harbor_docker_containerd.lock
      register: harbor_docker_containerd_exists

    - name: 配置docker访问harbor
      block:
        - name: 创建docker的harbor证书目录
          file:
            path: /etc/docker/certs.d/{{ harbor_domain }}
            state: directory
            mode: '0755'
        - name: 复制harbor证书到所有主机
          copy:
            src: /root/{{ harbor_domain.split('.')[0] }}.crt
            dest: /etc/docker/certs.d/{{ harbor_domain }}
        - name: 重启docker
          service:
            name: docker
            state: restarted
      when: not harbor_docker_containerd_exists.stat.exists

    - name: 配置containerd访问harbor
      block:
        - name: 复制containred配置文件到所有主机
          template:
            src: ../files/harbor/with_{{ passord_or_secert }}_config.toml.j2
            dest: /etc/containerd/config.toml
            backup: yes
          
        - name: 重启containerd
          service:
            name: containerd
            state: restarted

        - name: 创建安装lock文件
          file: 
            path: /root/k8s_install/harbor_docker_containerd.lock
            state: touch
      when: not harbor_docker_containerd_exists.stat.exists



- name: 安装harbor
  hosts: localhost
  gather_facts: no
  vars_files: ../files/vars.yaml
  tasks:
    - name: 检查harbor_install.lock文件是否存在
      stat:
        path: /root/k8s_install/harbor_install.lock
      register: harbor_install_exists

    - name: 远程安装harbor
      block:
        - name: 远程安装harbor
          shell: ansible harbor -m shell -a "/root/k8s_install/harbor_install_command.sh"

        - name: 温馨提示1
          debug:
            msg: |
              如需测试可以执行harbor目录中的两个文件,进行验证: kubectl apply -f files/harbor/test-harbor_with_{{ passord_or_secert }}.yaml

        - name: 温馨提示2
          debug:
            msg: |
              如果选择的是secert方式,需要提前创建secert,并修改test-harbor_with_secert.yaml中的imagePullSecrets,详情参考仓库根目录readme

        - name: 创建安装lock文件
          file: 
            path: /root/k8s_install/harbor_install.lock
            state: touch
          
      when: not harbor_install_exists.stat.exists




